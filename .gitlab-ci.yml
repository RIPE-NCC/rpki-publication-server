stages:
  - build
  - package
  - deploy

build:
  stage: build
  image: $CI_REGISTRY/swe/gitlab-ci/sbt:1.3-2.13-jdk-8
  services:
    - postgres:12.1
  variables:
    POSTGRES_DB: pubserver
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
  script:
    - sbt clean test universal:packageZipTarball assembly -Dpostgresql.url=jdbc:postgresql://postgres/${POSTGRES_DB} -Dpostgresql.user=${POSTGRES_USER} -Dpostgresql.password=${POSTGRES_PASSWORD}
  artifacts:
    paths:
      - target/universal/rpki-publication-server-1.1-SNAPSHOT.tgz
      - target/rpki-publication-server.jar

.deploy_aws_template: &deploy_aws_template
  stage: deploy
  image: docker:latest
  dependencies:
    - build
  services:
    - docker:dind
  before_script:
    - apk add --update curl
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -f Dockerfile.artifact_container --tag $CI_REGISTRY_IMAGE/artifacts:$CI_COMMIT_SHA .
    - docker push $CI_REGISTRY_IMAGE/artifacts:$CI_COMMIT_SHA
    - curl -X POST -F "token=$CI_JOB_TOKEN" -F "ref=$BRANCH_TARGET" -F "variables[DEPLOY_TARGET]=$DEPLOY_TARGET" -F "variables[IMAGE_TARGET]=$CI_COMMIT_SHA"  "$AWS_PIPELINE_TRIGGER"
  when:
    manual

deploy_aws_prepdev:
  environment:
    name: prepdev
  variables:
    DEPLOY_TARGET: "prepdev"
  <<: *deploy_aws_template

deploy_aws_prod:
  environment:
    name: production
  variables:
    DEPLOY_TARGET: "prod"
  <<: *deploy_aws_template
  only:
    - master

.deploy_on_premise_template: &deploy_on_premise_template
  stage: deploy
  image: docker-registry.ripe.net/swe/gitlab-ci/debian-deployenv
  script:
    - if [ -z "${SALT_DEPLOY_TARGET}" ]; then echo "set SALT_DEPLOY_TARGET"; exit 2; fi;
    - if [ -z "${DEPLOY_USER_PASS}" ]; then echo "set DEPLOY_USER_PASS"; exit 2; fi;
    - if [ -z "${SALT_URL}" ]; then echo "set SALT_URL"; exit 2; fi;
    - if [ -z "${MONITORING_URL}" ]; then echo "set MONITORING_URL"; exit 2; fi;
    - echo "Logging into salt-api"
    - >
      curl -ik ${SALT_URL}/login \
        -c ~/cookies.txt \
        -H 'Accept: application/x-yaml' \
        -d username='rpkideploy' \
        -d password="$DEPLOY_USER_PASS" \
        -d eauth='pam'

    - echo "Updating containers via salt on $SALT_DEPLOY_TARGET"
    - >
      curl -D "/dev/stderr" -k ${SALT_URL} \
        -b ~/cookies.txt \
        -H 'Content-type: application/json' -d"
            [{
              \"timeout\": 120,
              \"failhard\": \"True\",
              \"client\": \"local_batch\",
              \"batch-size\": \"25%\",
              \"fun\": \"state.apply\",
              \"tgt_type\": \"glob\",
              \"tgt\": \"$SALT_DEPLOY_TARGET\",
              \"arg\": [\"docker.f5_container_up\"],
              \"kwarg\": {
                \"pillar\": {
                  \"vars\": {
                    \"container\": \"rpki-publication-server\",
                    \"health_endpoint\": \"${MONITORING_URL}\",
                    \"drain_time\": \"30\"
                  }
                }
              }
            }]
            " | jq -R '. as $raw | try fromjson catch $raw'


.build_and_tag_images: &build_and_tag_images
  stage: package
  image: docker:latest
  dependencies:
    - build
  services:
    - docker:dind
  script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker build --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA --tag $CI_REGISTRY_IMAGE:$IMAGE_TAG .
    - echo "Releasing this image as :$IMAGE_TAG and :${CI_COMMIT_SHORT_SHA}"
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE:$IMAGE_TAG

prepdev_image:
  <<: *build_and_tag_images
  variables:
    IMAGE_TAG: "prepdev"
  when:
    manual

production_image:
  <<: *build_and_tag_images
  variables:
    IMAGE_TAG: "production"
  when:
    manual
  only:
    - master

deploy_prepdev_premise:
  <<: *deploy_on_premise_template
  stage: deploy
  dependencies:
    - prepdev_image
  environment:
    name: prepdev
    url: https://publish-1.rpki.prepdev.ripe.net
  when:
    manual

deploy_production_premise:
  <<: *deploy_on_premise_template
  stage: deploy
  dependencies:
    - production_image
  environment:
    name: production
    url: https://publish-1.rpki.ripe.net
  only:
    - tags@rpki/rpki-publication-server
  when:
    manual

